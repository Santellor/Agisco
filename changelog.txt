day 1
    min: develop database components: db, model with relationship mapping
    max: complete seed

    developed the model and db initialization files, and the relationship mapping is functional 
    
    tomorrow: The seed file

day 2 
    min complete seed and begin establishing back end routes
    max: complete backend routes

    created the root JSON files with no discrepancies (miraculously) 
!! eventually, the exercises may be substituted with calls to an external API 
    
    developed template for seeding database, need to duplicate for all tables

    tomorrow: complete seed

day 3
    min: complete seed and complete back end routes
    max: implement controller 

    completed seed and corrected any errors in my relationship mapping
!! if you have time, check how Koa and Craig are initializing their databases
!! jsdocs seem really useful

    tomorrow: front end!! woot woot

day 4
    min: begin crud table rendering
    max: implement navbar

    adjusted queries and corrected errors with back end routes. 

    tomorrow: finish adjustments

day 5
    min: view 1 CRUD table on front end
    max: implement them all 

    finally corrected dynamic endpoints. they are working!!
    the query string filtering is also working!!
    I CAN VIEW ALL THE tables. I can only view them for now though

    tomorrow: logins ,redux store, etc

day 6
    min: add endpoints and complete controllers for login, logout, register, sessionCheck
    max: add full landing page functionality

    added 4 backend routes
    front-end functionality is up and running
    correctly evaluates for no password, no username, neither being correct
    when registering correctly evaluates when two 


    tomorrow: cannibalize the best parts of my noDB project
day 7
    min: create base viewer for all tables, ideally with full CRUD
    max: implement charts

    added a front-end router and also laid the groundwork for an active workout with redux
    login correctly redirects to and away from navbar
    tables no longer show timestamps, but are still ordered by them
!! don't forget to add a switcher for ordering if you are viewing workout instances
!! workout instances -> order by createdAt;   all others -> order by updatedAt
    edit toggling and delete toggling are all correctly implemented
    dynamic state for fields is in progress. I need to use redux to tackle it. 

    tomorrow: finish Redux and eager load other components for better display

day 8 
    min: finish Redux and eager load other components for better display
    max: full crud, mvp done

    record data now loads as intended for current use cases
!! fields need to evaluate data types (string, int, date, or bool), find values to alias as, and 
!! correctly perform indirect updates for the exercises record
!! for that, I will need checkbox icons, and a switch case in the editable fields 

    tomorrow - have a field day. its gonna be a doozy, but at least you know where to start

day 9 - field day 
    min: preserve data types in the tables
    max: correctly alias fields, and handle indirect editing with a new backend route. 

!! admin can be stored in redux to determine which CRUD tables are accessible, and if you are an admin...all fields should be editable. 
!! deleting and editing should be subject to if you are the owner
!! add new should be dependent on the modelRef. if you are not an admin, you should not be able to add a new muscle group or exercise type

    fields are correctly loading in haha I may have saved a fair amount of time through eager loading
    filtering at createdAt or updatedAt, and then cutting everything afterward
!! loading in exercise names for workoutSteps or workout names for workoutstepdata requires a nested eager load
!! the first login of the session always fails to reload
!! if not logged in, it needs to redirect to home on the sessionCheck
!! password is too short once I have finalized the project
    I am ready to be done with tables
MVP 2
    activeworkout
    Profile - Admin
    Charts






    